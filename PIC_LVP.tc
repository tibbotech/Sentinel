#include "global.th"
#include "PIC_LVP.th"
#include "utils.th"


pl_io_num icsp_scl, icsp_sda, icsp_mclr, icsp_int;


// Commands defined in PDF
//
enum pic_lvp_cmd {
	CMD_LOAD_CONFIG = 0x00,							// read  (0) data(14) (0)
	CMD_LOAD_DATA_FOR_PROGRAM_MEMORY = 0x02,		// write (0) data(14) (0)
	CMD_LOAD_DATA_FOR_DATA_MEMORY = 0x03,			// write (0) data(8) zero(6) (0)
	CMD_READ_DATA_FROM_PROGRAM_MEMORY = 0x04,		// read  (0) data(14) (0)
	CMD_READ_DATA_FROM_DATA_MEMORY = 0x05,			// read  (0) data(8) zero(6) (0)
	CMD_INCREMENT_ADDRESS = 0x06,					// -
	CMD_BEGIN_INTERNALLY_TIMED_PROGRAMMING = 0x08,	// -
	CMD_BULK_ERASE_PROGRAM_MEMORY = 0x09,			// -
	CMD_END_EXTERNALLY_TIMED_PROGRAMMING = 0x0A,	// -
	CMD_BULK_ERASE_DATA_MEMORY = 0x0B,				// -
	CMD_ROW_ERASE_PROGRAM_MEMORY = 0x11,			// -
	CMD_RESET_ADDRESS = 0x16,						// -
	CMD_BEGIN_EXTERNALLY_TIMED_PROGRAMMING = 0x18	// -
};


typedef struct {
	word datalen;
	word data[MAX_DATA_LEN];
	word config[MAX_CFG_LEN];
} firmware;


// Global flag to enable/disable SSI use
bool use_ssi;


#define T_ERAB_MS		5
#define T_PINT_MS		6
#define T_PEXT_MS		3


word 
swab(word w) 
{
	return ((w >> 8) & 0xFF) | ((w & 0xFF) << 8);
}


#if 0
void 
delay_ms(word ms) 
{
#if PLATFORM_ID==TPP2W || PLATFORM_ID==TPP3W
	word ax, bx;

	for(ax=0; ax<ms; ++ax) {
		for(bx=0; bx<5; ++bx) {
			/* do nothing */
		}
	}
#else
	dword t;
	ms = sys.timercountms + ms;
	while(sys.timercountms < ms) ;
#endif
}

#endif


void 
pic_set_reset(bool rv) 
{
	io.num = icsp_mclr;
	io.enabled = YES;
	io.state = rv? LOW: HIGH;
}


void 
pic_do_reset() 
{
	pic_set_reset(true);
	delay_ms(1);
	pic_set_reset(false);
}


void 
start_stop_bit()
{
	io.num = icsp_sda;
	io.enabled = YES;
	io.state = LOW;

	io.num = icsp_scl;
	io.state = HIGH;
	io.state = LOW;
	
	io.num = icsp_sda;
	io.enabled = NO;

	io.num = icsp_scl;
	io.enabled = YES;
}


void 
setup_ssi()
{
	if(!use_ssi)
		return;
		
	ssi.channel = 0;
	ssi.clkmap = icsp_scl;
	ssi.dimap = icsp_sda;
	ssi.domap = icsp_sda;
#if PLATFORM_ID != LTPP3	
	ssi.zmode = PL_SSI_ZMODE_ENABLED_ON_ZERO;
#endif	
	ssi.mode = PL_SSI_MODE_1;
	ssi.baudrate = 128; // Change this according to your needs
	ssi.enabled = YES;
}


void 
pic_send_bits(dword data, byte numbits)
{
	byte i;

	if(use_ssi) {
		if(numbits > 16) {
			ssi.value(data & 0xFFFF, 16);
			ssi.value(data >> 16, numbits - 16);
		} else {
			ssi.value(data, numbits);
		}
	} else {
		io.num = icsp_sda;
		io.enabled = YES;
		io.state = LOW;
		
		io.num = icsp_scl;
		io.enabled = YES;
		io.state = LOW;

		for(i=0; i<numbits-1; ++i) {
			io.lineset(icsp_sda, data & 0x0001);
			io.state = HIGH;
			io.state = LOW;
			io.lineset(icsp_sda, LOW);
			data >>= 1;
		}
	}
}


// Receive bits from the wire
//
word 
pic_recv_bits() 
{
	byte i;
	word res;
	
	if(use_ssi) {
		res = ssi.value(0x7FFE, 16);
		res = (res >> 1) & 0x3FFF;
	} else {
		res = 0;

		start_stop_bit();
		
		for(i=0; i < 13; ++i) {
			io.state = HIGH;
			res = (res >> 1) | ((io.lineget(icsp_sda) & 0x1) << 13);
			io.state = LOW;
		}

		start_stop_bit();
	}
	
	return res;
}


void 
pic_command(byte b)
{
	pic_send_bits(b, 6);
}


void 
pic_command_and_delay(byte b, word ms)
{
	pic_send_bits(b, 6);
	delay_ms(ms);
}


word 
pic_recv_pgm_word() 
{
	word w;
	pic_command(CMD_READ_DATA_FROM_PROGRAM_MEMORY);
	w = swab(pic_recv_bits());
	pic_command(CMD_INCREMENT_ADDRESS);
	return w;
}


word
pic_recv_cfg_word()
{
	word w;
	pic_command(CMD_READ_DATA_FROM_PROGRAM_MEMORY);
	w = pic_recv_bits(); // No need to swap nibbles
	pic_command(CMD_INCREMENT_ADDRESS);
	return w;
}


// Loads a current latch with 14 bits of data, {
// increments latch address
//
void 
pic_send_pgm_word(word w, bool doinc)
{
	word t;
	t = swab(w); // swap nibbles
	pic_command(CMD_LOAD_DATA_FOR_PROGRAM_MEMORY);
	pic_send_bits((t << 1) & 0x7FFE, 16);
	if(doinc) 
		pic_command(CMD_INCREMENT_ADDRESS);
}


void
pic_send_cfg_word_bulk(word w) 
{ 
	pic_command(CMD_LOAD_DATA_FOR_PROGRAM_MEMORY);
	pic_send_bits((w << 1) & 0x7FFE, 16);
	pic_command(CMD_INCREMENT_ADDRESS);
}


// Performs one-word program cycle, { depicted on picture 5-3 on page 24 of the pdf
//
word 
pic_send_cfg_word(word w) 
{
	word t;
	
	pic_command(CMD_LOAD_DATA_FOR_PROGRAM_MEMORY);
	pic_send_bits((w << 1) & 0x7FFE, 16);
	pic_command_and_delay(CMD_BEGIN_INTERNALLY_TIMED_PROGRAMMING, T_PINT_MS);
	pic_command(CMD_READ_DATA_FROM_PROGRAM_MEMORY);
	t = pic_recv_bits();
#if 0
	sys.debugprint(hex(t)+"\r\n");
#endif
	pic_command(CMD_INCREMENT_ADDRESS);
	return t;
}


void 
pic_enter_lvp_mode(void)
{
	io.num = icsp_scl;
	io.enabled = YES;
	io.state = LOW;
	
	io.num = icsp_sda;
	io.enabled = YES;
	io.state = LOW;

	// Enter LVP mode
	// Bring MCLR to V_il (low state)
	delay_ms(10);
	
	io.num = icsp_mclr;
	io.enabled = YES;
	io.state = HIGH;
	
	delay_ms(10);
	
	io.state = LOW;
	delay_ms(2);
	
	// This is a //magic// sequence of bits, which forces PIC
	// to fall into the low voltage programming mode
	//
	// pic_send_bits(0b01001101010000110100100001010000, 33)
	// Note that bit order is LSB to MSB!
#if 0
	pic_send_bits(0b01010000, 8); // P
	pic_send_bits(0b01001000, 8); // H
	pic_send_bits(0b01000011, 8); // C
	pic_send_bits(0b01001101, 9); // M + 1 extra 0 bit
#else
	pic_send_bits('P', 8); // P
	pic_send_bits('H', 8); // H
	pic_send_bits('C', 8); // C
	pic_send_bits('M', 9); // M + 1 extra 0 bit
#endif
	delay_ms(20);
}


void 
pic_leave_lvp_mode()
{
	io.num = icsp_mclr;
	io.state = HIGH;
	io.state = LOW;
	delay_ms(5);
	io.state = HIGH;

	io.num = icsp_scl;
	io.enabled = YES;
	io.state = HIGH;

	io.num = icsp_sda;
	io.enabled = YES;
	io.state = HIGH;
	
	delay_ms(10);
}


bool
pic_id(word id, string& model) 
{
	switch(id) {
		case 0b100111100:
			model = "16F1826";
			break;
		case 0b100111101:
			model = "16F1827";
			break;
		case 0b101000100:
			model = "16LF1826";
			break;
		case 0b101000101:
			model = "16LF1827";
			break;
		case 0b100111001:
			model = "16F1823";
			break;
		case 0b101000001:
			model = "16LF1823";
			break;
		case 0b100111000:
			model = "12F1822";
			break;
		case 0b101000000:
			model = "12LF1822";
			break;
		case 0b100111010:
			model = "16F1824";
			break;
		case 0b101000010:
			model = "16LF1824";
			break;
		case 0b100111011:
			model = "16F1825";
			break;
		case 0b101000011:
			model = "16LF1825";
			break;
		case 0b100111110:
			model = "16F1828";
			break;
		case 0b101000110:
			model = "16LF1828";
			break;
		case 0b100111111:
			model = "16F1829";
			break;
		case 0b101000111:			
			model = "16LF1829";
			break;
		default:
			return false;
	}
	
	return true;
}

	
// LVP (In-circuit Low Voltage Programming) of PIC coprocessor functions & procedures,
// described in PIC16F/LF182X/PIC12F/LF1822 Memory Programming Specification
// located at http://ww1.microchip.com/downloads/en/DeviceDoc/41390C.pdf
//
icsp_device_status 
get_device_identification(byte socket)
{ 
	word devid, rev;
	word wtmp[11];
	word verid, verno;
	byte i;
	string<8> pic_model;

	setup_ssi();
	
	pic_enter_lvp_mode();

	// Set address to 0x8000
	//
	pic_command(CMD_LOAD_CONFIG);
	pic_recv_bits();

	for(i=0; i<10; ++i)
		wtmp[i] = pic_recv_cfg_word(); 	// Get config words from 0x8000 to 0x800A

	pic_leave_lvp_mode();
	
#ifdef PIC_TRACE
	sys.debugprint("Config words: "+hex(wtmp[7])+", "+hex(wtmp[8])+"\r\n");
#endif		

	devid = (wtmp[6] >> 5) & 0b1111111111;
	rev = wtmp[6] & 0b11111;
	
	if(!pic_id(devid, pic_model)) {
#ifdef PIC_TRACE
		sys.debugprint("Invalid device ID: "+hex(devid)+"\r\n");
#endif		
		return ICSP_INVALID_DEVICE;
	} else {
#ifdef PIC_TRACE
		sys.debugprint("Found PIC model " + pic_model + ", revision " + str(rev) + "\r\n");
#endif		
	}
	
	verid = ((wtmp[0] & 0xFF) << 8) | (wtmp[1] & 0xFF);
	if(verid != 0x3157) // 3157 = "1W"
		return ICSP_NO_FIRMWARE;
	   
	verid = ((wtmp[2] & 0xFF) << 8) | (wtmp[3] & 0xFF);
	
#ifdef PIC_TRACE
	sys.debugprint("Found 1-wire firmware version " + str((verid >> 8) & 0xFF) + "." + str(verid & 0xFF) + "\r\n");
#endif

	return ICSP_FOUND;
}
	

// Parses .HEX file & fills buffer with parsed data
//
bool 
load_firmware(string& name, firmware& fw) 
{
	word i, offs, temp, addr;
	dword p, e, lba;
	string s, st;
	byte rlen, rtyp;
	
#ifdef PIC_TRACE
	sys.debugprint("Parsing HEX file\r\n");
#endif

	fw.datalen = 0;
	for(i=0; i<MAX_DATA_LEN-1; ++i)
		fw.data[i] = 0xFF3F; // 14 bits of 1's, in reverse byte order
	
	romfile.open(name);
	if(0 == romfile.size)
		return false;

	lba = 0;
	
	for(;;) {
		// Find Start-Of-Record mark
		p = romfile.find32(p, ":", 1);
		if(0 == p) 
			break;
		
		// Find end of line
		e = romfile.find32(p, "\r\n", 1);
		if(0 == e)
			e = romfile.size;
		
		// Check line length
		if((e - p) > 255)
			break;
		
		// Get the record
		romfile.pointer32 = p;
		s = romfile.getdata(e - p);
		p = e + 2;
		
		// Parse the record
		rlen = val("0x" + mid(s, 2, 2));
		offs = val("0x" + mid(s, 4, 4));
		rtyp = val("0x" + mid(s, 8, 2));
		
		switch(rtyp) {
			case 0x00: // DATA
				// Data record must be word-aligned
				//
				if(rlen % 2 != 0)
					return false;
				
				for(i=0; i < (rlen / 2) - 1; --i) {
					st = mid(s, 10 + i*4, 4);
					temp = val("0x" + st);
					if(0 == lba) {
						addr = lba + offs/2 + i;
						fw.data[addr] = temp;
						if(addr > fw.datalen)
							fw.datalen = addr;
					} else if(lba == 0x10000) {
						fw.config[offs/2 + i] = temp;
					}
				}
				
				break;
				
			case 0x01: // EOF
				break;
				
			case 0x02: // Extended Segment Address 
				break; 
				
			case 0x03: // Start Segment Address
				break; 
				
			case 0x04: // Extended Linead Address
				// The 32-bit Extended Linear Address Record is used to specify bits 16-31 of 
				// the Linear Base Address (LBA), where bits 0-15 of the LBA are zero.
				if(rlen != 2)
					return false;
					
				st = mid(s, 10, 4);
				lba = val("0x" + st);
				lba = lba << 16;
				break;
				
			case 0x05: // Start Linear Address
				break; // Breakpoint placeholder
				
			default:
				return false;
		}
	}
	
	return true;
}


void 
program_config_words(firmware& fw)
{
	word i;
	word config0, config1;
	word uid0, uid1, uid2, uid3;
	
#ifdef PIC_TRACE
	sys.debugprint("Programming user ID & config words\r\n");
#endif

	pic_command(CMD_LOAD_CONFIG);
	pic_recv_bits();

	uid0 = swab(fw.config[0]);
	uid1 = swab(fw.config[1]);
	uid2 = swab(fw.config[2]);
	uid3 = swab(fw.config[3]);
	
	// 4 words of user ID
	//
	pic_send_cfg_word(uid0);			// 0x8000
	pic_send_cfg_word(uid1);			// 0x8001
	pic_send_cfg_word(uid2);			// 0x8002
	pic_send_cfg_word(uid3);			// 0x8003

	pic_command(CMD_INCREMENT_ADDRESS);	// 0x8004
	pic_command(CMD_INCREMENT_ADDRESS);	// 0x8005
	pic_command(CMD_INCREMENT_ADDRESS);	// 0x8006

	// Config words 1 & 2
	//
	config0 = swab(fw.config[7]);
	config1 = swab(fw.config[8]);
	
	sys.debugprint("CONFIG1 & CONFIG2 words are " + hex(config0) + " & " + hex(config1) + "\r\n");
	
	pic_send_cfg_word(config0);			// 0x8007
	pic_send_cfg_word(config1); 		// 0x8008
	
	//pic_command_and_delay(CMD_BEGIN_INTERNALLY_TIMED_PROGRAMMING, T_PINT_MS)
}


bool
program_firmware(byte socket, firmware& fw) 
{
	word i, j, temp, datalen;
	
	datalen = fw.datalen;
	if(0 != datalen % 32)
		datalen = (datalen | 31) + 1; // Round to next power of 32
	
	setup_ssi();
	
	pic_enter_lvp_mode();

#ifdef PIC_TRACE
	sys.debugprint("Erasing memory\r\n");
#endif
	pic_command(CMD_LOAD_CONFIG);
	pic_recv_bits();
	
	pic_command_and_delay(CMD_BULK_ERASE_PROGRAM_MEMORY, T_ERAB_MS);
	//pic_command_and_delay(CMD_BULK_ERASE_DATA_MEMORY, T_ERAB_MS)

#ifdef PIC_TRACE
	sys.debugprint("Uploading ");
#endif

	pic_command(CMD_RESET_ADDRESS);
	for(i=0; i<datalen; i+=32) {
#ifdef PIC_TRACE
		sys.debugprint("#");
#endif
		for(j=0; j<32; ++j)
			pic_send_pgm_word(fw.data[i+j], j<31);

		pic_command_and_delay(CMD_BEGIN_INTERNALLY_TIMED_PROGRAMMING, T_PINT_MS);
		pic_command(CMD_INCREMENT_ADDRESS);
	}
	
#ifdef PIC_TRACE
	sys.debugprint("\r\n");
#endif

	pic_leave_lvp_mode();

	//delay_ms(25)

	pic_enter_lvp_mode();

	program_config_words(fw);

	// Now verify what we just programmed
	//
#ifdef PIC_TRACE
	sys.debugprint("Verifying ");
#endif
	
	pic_command(CMD_RESET_ADDRESS);
	
	for(i=0; i<datalen; i+=32) {
#ifdef PIC_TRACE
		sys.debugprint("#");
#endif
		for(j=0; j<32; ++j) {
			temp = pic_recv_pgm_word();
			if(temp != fw.data[i+j]) {
#ifdef PIC_TRACE
				sys.debugprint("\r\nData check error: "+hex(i+j)+": read "+hex(temp)+", expected "+hex(fw.data[i+j])+"\r\n");
#endif
				pic_leave_lvp_mode();
				return false;
			}
		}
	}

#ifdef PIC_TRACE
	sys.debugprint("\r\n");
#endif

	pic_leave_lvp_mode();
	
	ssi.enabled = NO;
	
	pic_do_reset();
	
#ifdef PIC_TRACE
	sys.debugprint("Success\r\n");
#endif
	return true;
}


bool
pic_upload_firmware(byte socket, string& fwname) 
{ 
	firmware fw;
	
	load_firmware(fwname, fw);
	if(!program_firmware(socket, fw)) {
		sys.debugprint("UPLOADING FAILED\r\n");
		return false;
	} 
	
	return true;
}


string
do_web_fw_upload(string q)
{
	word stage = val(query_arg(q, "stage", "1"));
	string res;
	static word perc = 0;
	
	switch(stage) {
		case 1:
			perc += 10;
			res = j_encode("p", str(perc));
			res += "," + j_encode("s", perc >= 100? "e": "c");
			if(perc >= 100)
				perc = 0;
			break;
	}
	
	return res;
}


void
process_fw_upload(void)
{
	string q = query_string();
	sock_send("{" + do_web_fw_upload(q) + "}");	
}
