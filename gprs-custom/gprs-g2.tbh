'***********************************************************************************************************
'		MODIFIED GPRS LIBRARY
'***********************************************************************************************************

'0- GPRS disabled (library code won't be compiled into the project)
'1- GPRS enabled
#ifndef SUPPORTS_GPRS
	#define SUPPORTS_GPRS 0
#endif

'0- no debug output.
'1- debug output in console.
#ifndef GPRS_DEBUG_PRINT
	#define GPRS_DEBUG_PRINT 0
#endif

'0- suppress pinging.
'1- ping GPRS_PING_IP in the end of PPP link establishment (as a proof of success).
#ifndef GPRS_SEND_PING
	#define GPRS_SEND_PING 0
#endif

'This is the IP address that will be pinged when GPRS_SEND_PING is set.
'Only relevant when GPRS_SEND_PING is 1.
#ifndef GPRS_PING_IP
	#define GPRS_PING_IP "0.0.0.0"
#endif


'0- the GPRS module is external, GPRS_SWITCH and GPRS_RESET GPIO lines are not in use, there is no startup delay-
'the GPRS module is supposed to be up and running by the time gprs_start() is called
'1- the GPRS module is internal (like on the NB1010 and DS101x), GPRS_SWITCH and GPRS_RESET
'lines are used to control the module; there is a proper reset and startup delay when gprs_init_start()
'is called
'Keep at default value for NB1010 and DS101x devices.
#ifndef GPRS_MODULE_EXTERNAL
	#define GPRS_MODULE_EXTERNAL 0
#endif


'Size of TCP and UDP packets that the GPRS interface will be able to carry, expressed in 256-byte units.
'Do not set >4 or <1.
#ifndef GPRS_PAYLOAD_SIZE
	#define GPRS_PAYLOAD_SIZE 4
#endif

'--------------------------------------------------------------------
enum en_gprs_status_codes
	GPRS_STATUS_OK,
	GPRS_STATUS_INSUFFICIENT_BUFFER_SPACE
end enum

enum gprs_info_elements
	GPRS_INFO_ELEMENT_REQUIRED_BUFFERS
end enum

'--------------------------------------------------------------------
declare function gprs_get_info(info_element as gprs_info_elements, byref extra_data as string) as string
declare function gprs_start(byref at_dt_command_param as string, byref apn as string, byref username as string, byref password as string) as en_gprs_status_codes
declare sub gprs_stop()
declare sub gprs_proc_ser_data()
declare sub gprs_proc_sock_data()
declare sub gprs_proc_timer()

declare sub callback_gprs_pre_buffrq(required_buff_pages as byte)
'Callback procedure, informs of the insufficient number of free buffer pages available for use by the library.
'Procedure body has to be created elsewhere in the project (externally with respect to the library).

declare sub callback_gprs_ok()
'Callback procedure, informs of the successul establishment of the PPP link.
'Procedure body has to be created elsewhere in the project (externally with respect to the library).

declare sub callback_gprs_failure()
'Callback procedure, informs that PPP login/configuration or established link failed.
'Procedure body has to be created elsewhere in the project (externally with respect to the library).

declare gprs_ser_port as byte
