#include "global.th"
#include "hal.th"
#include "utils.th"


static word _rates[RATE_MAX]; 					// Precalculated baud rate divisors for 'ser' object
static ioport *_serial[HAL_UART_COUNT];


void
serial_init()
{
	unsigned char i;
#if PLATFORM_ID != LTPP3
	int d = ser.div9600;
	
	/* Precalculate divisors for specified baud rates
	 */
	_rates[R_1200] = d * 8; 	// 1200
	_rates[R_2400] = d * 4; 	// 2400
	_rates[R_4800] = d * 2; 	// 4800
	_rates[R_9600] = d;	  		// 9600
	_rates[R_19200] = d / 2; 	// 19200
	_rates[R_38400] = d / 4; 	// 38400
	_rates[R_57600] = d / 6; 	// 57600
	_rates[R_115200] = d / 12; 	// 115200
#else
	_rates[R_1200] = PL_SER_BAUD_1200; 	// 1200
	_rates[R_2400] = PL_SER_BAUD_2400; 	// 2400
	_rates[R_4800] = PL_SER_BAUD_4800; 	// 4800
	_rates[R_9600] = PL_SER_BAUD_9600;	// 9600
	_rates[R_19200] = PL_SER_BAUD_19200;// 19200
	_rates[R_38400] = PL_SER_BAUD_38400;// 38400
	_rates[R_57600] = PL_SER_BAUD_57600; // 57600
	_rates[R_115200] = PL_SER_BAUD_115200; // 115200
#endif
	for(i=0; i<HAL_UART_COUNT; ++i)
		_serial[i] = NULL;
}


ioport *
serial_port(unsigned char spn)
{
	if(spn >= HAL_UART_COUNT)
		return NULL;
	return _serial[spn];
}


static bool
_is_serial_type(iotype t)
{
	return (IO_RS232 == t) || (IO_RS422 == t) || (IO_RS485 == t);
}


bool
is_serial_port(ioport *p)
{
	return _is_serial_type(ioport_type(p));
}


void
serial_set_rate(ioport *p, serial_rate rate)
{
	if(is_serial_port(p)) {
		ser.num = p->d.ser.spn;
		ser.enabled = NO;
#if PLATFORM_ID == LTPP3
		ser.baud = _rates[rate];
#else
		ser.baudrate = _rates[rate];
#endif		
		ser.enabled = YES;
	}
}


serial_role
serial_get_role(ioport *sp)
{
	if(is_serial_port(sp))
		return sp->d.ser.role;
	return SR_UART;
}


/* TODO Make serial port settings: speed, parity, stop bits, etc. programmable via web-interface
 */
void
serial_setup(ioport *p)
{
	pl_io_num rts, cts;
	
	if(!is_serial_port(p))
		return;
		
	ser.num = p->d.ser.spn;

	/* 512 bytes per RX and TX buffers
	 */
	ser.rxbuffrq(2);
	ser.txbuffrq(2);
	//ser.redir(PL_REDIR_SER + ser.num);
	sys.buffalloc();

	ser.rxclear();
	ser.txclear();
	ser.notifysent(1); 
	
	ser.mode = PL_SER_MODE_UART;
	ser.bits = PL_SER_BB_8;
	ser.parity =  PL_SER_PR_NONE;
	
	if(p->type == IO_RS485) {
		ser.flowcontrol = PL_SER_FC_DISABLED;
		ser.interface = PL_SER_SI_HALFDUPLEX;
		serial_set_rate(p, R_19200);
	} else {
		ser.flowcontrol = PL_SER_FC_RTSCTS;
		ser.interface = PL_SER_SI_FULLDUPLEX;
#if PLATFORM_ID != LTPP3
		/* Make RTS IO line to serve as output and CTS IO line as input
		 */
		io.num = ser.rtsmap;
		io.enabled = YES; // enable output driver

		io.num = ser.ctsmap;
		io.enabled = NO; // disable output driver
#endif		
		serial_set_rate(p, R_115200); 
	}
		
	ser.enabled = YES;
}


bool
serial_set_role(ioport *sp, serial_role role)
{
	if(is_serial_port(sp)) {
		sp->d.ser.role = role;
		return true;
	}
	
	return false;
}


bool
serial_set_type(ioport *sp, iotype new_type)
{
	if(NULL == sp)
		return false; // Null IOPORT
		
	if(!_is_serial_type(new_type))
		return false;
		
	if(!_is_serial_type(sp->type))
		return false; // Not a serial port
		
	if(NULL == sp->d.ser.ctl)
		return false; // Not an universal serial port Tibbit (#02)
		
	switch(new_type) {
		case IO_RS232:
			gp4_setstate(sp->d.ser.ctl, 0, HIGH);
			gp4_setstate(sp->d.ser.ctl, 1, LOW);
			break;
			
		case IO_RS422:
			gp4_setstate(sp->d.ser.ctl, 0, HIGH);
			gp4_setstate(sp->d.ser.ctl, 1, HIGH);
			break;
			
		case IO_RS485:
			gp4_setstate(sp->d.ser.ctl, 0, LOW);
			gp4_setstate(sp->d.ser.ctl, 1, HIGH);
			break;
			
		default: // will never happen
			return false;
	}
	
	return true;
}


void
serial_remember_port(ioport *p)
{
	if(NULL != p) {
		if(is_serial_port(p)) {
			_serial[p->d.ser.spn] = p;
		}
	}
}


void
serial_send(ioport *p, string data)
{
	if(!is_serial_port(p) || 0 == len(data))
		return;
		
#if 0
	DBG("SER_SEND (#"+str(ser.num)+"): " + dump(data) + "\r\n");
#endif

	ser.num = p->d.ser.spn;

	ser.notifysent(1);
	ser.setdata(data);
	ser.send();
	
#if 0	
	while(ser.txlen > 0) ;
#endif	
}


string
serial_recv(ioport *p, byte maxlen)
{
	ser.num = p->d.ser.spn;
	return ser.getdata(maxlen);
}


low_high
gp4_state(ioport *p, byte n)
{
	pl_io_num *pins, pn;
	
	if(n > 3 && NULL != p->d.ser.ctl) {
		pins = p->d.ser.ctl->d.pin;
		n -= 4;
	} else {
		pins = p->d.pin;
	}
		
	pn = pins[n & 3];
	return io.lineget(pn);
}


void
gp4_setstate(ioport *p, byte n, low_high ns)
{
	pl_io_num *pins, pn;
	
	if(n > 3 && NULL != p->d.ser.ctl) {
		pins = p->d.ser.ctl->d.pin;
		n -= 4;
	} else {
		pins = p->d.pin;
	}
		
	pn = pins[n & 3];
	io.lineset(pn, ns);
}


void
gp4_enable(ioport *p, byte n, no_yes ns)
{
	pl_io_num *pins, pn;
	
	if(n > 3 && NULL != p->d.ser.ctl) {
		pins = p->d.ser.ctl->d.pin;
		n -= 4;
	} else {
		pins = p->d.pin;
	}
		
	pn = pins[n & 3];
	io.num = pn;
	io.enabled = ns;
}
