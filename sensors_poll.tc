#include "global.th"
#include "1wire.th"
#include "ssi.th"
#include "sensors_db.th"
#include "device_funcs.th"
#include "utils.th"
#include "tgs.th"
#include "modbus.th"


/* I/O program commands
 */
enum pcmd {
	CMD_WRITE 	= 'W',
	CMD_READ 	= 'R',
	CMD_DELAY 	= 'D',
	CMD_END 	= '.',
};


struct pchunk {
	pcmd cmd;
	byte cb;
	byte data[1];
};


static string
_read(sensor *sens, byte cb, bool do_stop)
{
	string res = "";
#ifdef _TRACE_IO	
	string out = "";
#endif	
	byte r, rl;
	byte i2ca;
	
	switch(sens->bus) {
		case IO_I2C:
			i2ca = (sens->i2c_addr << 1) | 0x01;
			i2c_start(sens->port);
			i2c_write(sens->port, i2ca);
#ifdef _TRACE_IO			
			out = "I2C_START R " + tohex(i2ca) + " LEN=" + str(cb) + " [";
#endif			
			for(; cb != 0; --cb) {
				r = i2c_read(sens->port, cb != 1);
				res += chr(r);
#ifdef _TRACE_IO				
				out += tohex(r);
				if(cb != 1)
					out += " ";
#endif					
			}
			
			i2c_stop(sens->port);
#ifdef _TRACE_IO			
			out += "] I2C_STOP";
#endif			
			break;
			
		case IO_OW:
#ifdef _TRACE_IO		
			out = "";
#endif			
			if(do_stop) {
				if(!ow_start(sens->port, sens->chnl, OW_MATCH_ROM, &sens->ow_addr))
					break;
#ifdef _TRACE_IO					
				else out += "1W_START R "+address_format(IO_OW, &sens->ow_addr);
			} else {
				out += "R ";
#endif
			}
			
#ifdef _TRACE_IO			
			out += "LEN="+str(cb)+" [";
#endif				
			res = ow_recvstr(sens->port, cb);
#ifdef _TRACE_IO
			rl = len(res);
			for(byte i=0; i<rl; ++i) {
				out += tohex(res[i]);
				if(i < rl-1)
					out += " ";
			}
			out += "] 1W_STOP";
#endif				
			ow_stop(sens->port);
			break;
			
		case IO_RS232:
		case IO_RS422:
		case IO_RS485:
#if 0		
			/* Code moved out of this function because it requires 'doevents'
			 */
			if(SR_MODBUS == serial_get_role(sens->port)) {
				if(!modbus_process_result(sens))
					ERR("ModBus request timeout");
			}
#endif			
			break;
	}
	
#ifdef _TRACE_IO
	if(len(out) > 0)
		DBG(out);
#endif			

	return res;
}


static void
_write(sensor *sens, byte *cmd, byte cmdlen, bool do_stop)
{
	byte i2ca;
#ifdef _TRACE_IO	
	string out = "";
#endif	
	word *regno;
	
	switch(sens->bus) {
		case IO_I2C:
			i2ca = (sens->i2c_addr << 1) | 0x00;
			i2c_start(sens->port);
			i2c_write(sens->port, i2ca);
#ifdef _TRACE_IO
			out = "I2C_START W " + tohex(i2ca) + " LEN="+str(cmdlen) + " [";
#endif
			for(byte i=0; i<cmdlen; ++i) {
#ifdef _TRACE_IO			
				out += tohex(cmd[i]);
				if(i != cmdlen-1)
					out += " ";
#endif					
				i2c_write(sens->port, cmd[i]);
			}
			
#ifdef _TRACE_IO
			out += "] ";
#endif

			if(do_stop) {
#ifdef _TRACE_IO			
				out +=  "I2C_STOP";
#endif					
				i2c_stop(sens->port);
			}
			break;
			
		case IO_OW:
			if(ow_start(sens->port, sens->chnl, OW_MATCH_ROM, &sens->ow_addr)) {
#ifdef _TRACE_IO
				out = "1W_START W " + address_format(IO_OW, &sens->ow_addr) + " [";
				for(byte i=0; i<cmdlen; ++i) {
					out += tohex(cmd[i]);
					if(i < cmdlen-1)
						out += " ";
				}
				out += "] ";
#endif				
				ow_send(sens->port, cmd, cmdlen);
				if(do_stop) {
#ifdef _TRACE_IO				
					out += "1W_STOP";
#endif
					ow_stop(sens->port);
				}
			}
			break;

		case IO_RS232:
		case IO_RS422:
		case IO_RS485:
			if(SR_MODBUS == serial_get_role(sens->port)) {
				if(cmdlen == sizeof(word)) {
					regno = (word *)&cmd[0];
					modbus_request(sens->port, sens->modbus_addr, READ_INPUT_REGISTERS, *regno, 1);
				}
			}
			break;
	} // switch

#ifdef _TRACE_IO
	if(len(out) > 0)
		DBG(out);
#endif			
}


static string
_exec_io_program(sensor *sens, byte *prog, byte plen)
{
	pchunk *ck = (pchunk *)prog;
	pchunk *next;
	byte i, l;
	string res;
	bool do_stop;
	
	res = "";
	do_stop = true;
	
	while(plen != 0) {
		if(ck->cb > plen) // Something went wrong: chunk longer than remaining part of program!
			break; 
			
		next = (plen == ck->cb)? NULL: (pchunk *)&ck->data[ck->cb]; 
		switch(ck->cmd) {
			case CMD_READ:
				res += _read(sens, ck->data[0], do_stop);
				do_stop = true;
				break;
				
			case CMD_WRITE:
				do_stop = (NULL != next)? next->cmd != CMD_READ: true; // special handling for R->W pairs
				_write(sens, ck->data, ck->cb, do_stop);
				break;
				
			case CMD_DELAY:
				delay(ck->data[0]);
				break;
			
			case CMD_END:
				return res;
				
			default: // Something went wrong: unknown command opcode!
				return res;
		}
		
		plen -= ck->cb;
		ck = next;
	}
	
	return res;
}


static void 
_run(sensor *addr, string& cmd, string& tmp)
{
	byte *ptr, i, np, nbf, pl;

	// First byte is the subprogram counter
	ptr = (byte *)&cmd[0]; 
	for(np = *ptr++; np != 0; --np) {
		for(nbf = *ptr++; nbf != 0; --nbf) {
			pl = *ptr++; // Command length byte
			
			for(i=0; i<NUM_SENSOR_PARAMS; ++i)
				addr->prev[i] = addr->res[i];

			exec_program(addr, tmp, ptr, pl);
			
			ptr += pl;
		}
	}
}


static void
_sensor_read_tibbo(sensor *s)
{
	tgs_addr a = chr(s->mac[0]) + chr(s->mac[1]) + chr(s->mac[2]) + chr(s->mac[3]);
	word rqid;
	dword tmo;
	
	tibbo_sensors_poll();

	while(0 == (rqid = tibbo_query_sensor(s->port, a, 0, s))) {
		/* wait until queue has some available space */
		doevents;
		tibbo_sensors_poll();
	}

	tibbo_sensors_poll();

	while(!tibbo_task_finished(rqid)) {
		doevents;
		tibbo_sensors_poll();
	}
	
	tibbo_task_done(rqid);
}


static void
_sensor_read_modbus(sensor *addr)
{
	string<16> tmp;
	string cmd;
	dword tmo;
	
	if(!sensor_db_open())
		return;

	cmd = sensor_db_get_read_command(addr->drvid);
	if(len(cmd) != 0) {
#ifdef _TRACE_IO
		DBG("TYPE="+tohex(addr->drvid));
#endif
		tmp = _exec_io_program(addr, (byte *)&cmd[0], len(cmd));
		cmd = sensor_db_get_read_program(addr->drvid);
		if(len(cmd) > 0) {
			_run(addr, cmd, tmp);
			tmo = sys.timercountms + MODBUS_TIMEOUT;
			while(sys.timercountms < tmo) {
				if(modbus_process_result(addr))
					break;
				// allow OS to handle all internal jobs
				doevents;
			}
		}
	}
}


static void
_sensor_read(sensor *addr)
{
	string cmd;
	string<16> tmp;

	if(!sensor_db_open())
		return;

	cmd = sensor_db_get_read_command(addr->drvid);
	if(len(cmd) != 0) {
#ifdef _TRACE_IO
		DBG("-- READ_SENSOR TYPE="+tohex(addr->drvid)+" --");
#endif
		tmp = _exec_io_program(addr, (byte *)&cmd[0], len(cmd));
		cmd = sensor_db_get_read_program(addr->drvid);
		if(len(cmd) > 0)
			_run(addr, cmd, tmp);
	}
}


/*! \brief Read sensor value
 */
void
sensor_read(sensor *addr)
{
	serial_role sr;
	
	switch(ioport_type(addr->port)) {
		case IO_RS232:
		case IO_RS422:
		case IO_RS485:
			sr = serial_get_role(addr->port);
			if(SR_TIBBO == sr)
				_sensor_read_tibbo(addr);
			else if(SR_MODBUS == sr)
				_sensor_read_modbus(addr);
			else if(SR_MODEM != sr)
				_sensor_read(addr);
			break;
			
		case IO_DC:
		case IO_WC:
		case IO_GPIO4:
			/* The dry contact lines are polled elsewhere
			 */
			 break;

		default:
			_sensor_read(addr);
			break;
	}

    sensor_alarm_check(addr);
}


/*! \brief Issue sensor initialization commands
 */
void
sensor_init(sensor *addr)
{
	string cmd;
	string<16> tmp;
	
	/* Dry contacts doesn't have any initialization or configuration
	 * commands
	 */
	if(IO_DC == ioport_type(addr->port))
		return;
		
	if(!sensor_db_open())
		return;
	
	cmd = sensor_db_get_init_command(addr->drvid);
	if(len(cmd) == 0)
		return;

#ifdef _TRACE_IO
	DBG("-- INIT_SENSOR TYPE="+tohex(addr->drvid)+" --");
#endif

	tmp = _exec_io_program(addr, (byte *)&cmd[0], len(cmd));
	cmd = sensor_db_get_init_program(addr->drvid);
	if(len(cmd) > 0) 
		_run(addr, cmd, tmp);
}
