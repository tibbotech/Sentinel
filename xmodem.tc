#include "global.th"
#include "hal.th"
#include "utils.th"


/* \file xmodem.tc
 * This file contains the X-Modem protocol realisation to upload firmware
 * into the hexagon sensors
 */

#define XMODEM_PACKET_SIZE      128

#define XMODEM_SOH              0x01
#define XMODEM_EOT              0x04
#define XMODEM_ACK              0x06
#define XMODEM_NACK             0x15
#define XMODEM_ETB              0x17
#define XMODEM_CAN              0x18
#define XMODEM_16BITCRC         'C'
#define XMODEM_EOF              0x1A    // Ctrl+Z

#define MAX_RETRIES             10
#define XMODEM_TIMEOUT			3000	// in ms


ioport *sp;


static word
swapb(word t)
{
	return ((t >> 8) & 0xFF) | ((t & 0xFF) << 8);
}


bool 
load_firmware(string name, firmware *fw)
{
	word i, offs, temp, addr;
	dword p, e, lba;
	string s, st;
	byte rlen, rtyp;
	
	DBG("Parsing HEX file");

	fw->datalen = 0;
	for(i=0; i<MAX_DATA_LEN; ++i)
		fw->data[i] = 0x3FFF;
	
	romfile.open(name);
	if(0 == romfile.size)
		return false;

	lba = 0;
	p = 0;
	
	for(;;) {
		/* Find Start-Of-Record mark */
		p = romfile.find32(p, ":", 1);
		if(0 == p)
			break;
		
		/* Find end of line */
		e = romfile.find32(p, "\r\n", 1);
		if(0 == e)
			e = romfile.size;
		
		/* Check line length */
		if(e - p > 255)
			break;
		
		/* Get the record */
		romfile.pointer32 = p;
		s = romfile.getdata(e - p);
		p = e + 2;
		
		/* Parse the record */
		rlen = val("&h" + mid(s, 2, 2));
		offs = val("&h" + mid(s, 4, 4));
		rtyp = val("&h" + mid(s, 8, 2));
		
		switch(rtyp) {
			case 0x00: // DATA
				/* Data record must be word-aligned
				 */
				if(0 != rlen % 2)
					return false;
				
				for(i=0; i<(rlen / 2); ++i) {
					st = mid(s, 10 + i*4, 4);
					temp = val("&h" + st);
					if(0 == lba) {
						addr = lba + offs/2 + i;
						fw->data[addr] = swapb(temp);
						if(addr > fw->datalen)
							fw->datalen = addr;
					} else if(lba == 0x10000) {
						fw->config[offs/2 + i] = temp;
					}
				}
				break;
				
			case 0x01: // EOF
				return true; 
				
			case 0x02: // Extended Segment Address 
				false; // Breakpoint placeholder
				
			case 0x03: // Start Segment Address
				false; // Breakpoint placeholder
				
			case 0x04: // Extended Linead Address
				/* The 32-bit Extended Linear Address Record is used to specify bits 16-31 of 
				 * the Linear Base Address (LBA), where bits 0-15 of the LBA are zero.
				 */
				if(2 != rlen)
					return false;

				st = mid(s, 10, 4);
				lba = val("0x" + st);
				lba = lba << 16;
				break;
				
			case 0x05: // Start Linear Address
				false; // Breakpoint placeholder
				
			default:
				return false;
		}
	}
	
	/* Will never get here, but compiler complains about 'return' absence
	 */
	 return false;
}


static string
recv_tm(byte cnt)
{
	string res;
	dword tm;
	
	tm = sys.timercountms + XMODEM_TIMEOUT;
	while(sys.timercountms < tm) {
		res = ser.peekdata(cnt);
		if(len(res) == cnt)
			break;
	}
	
	return res;
}

 
static bool
transmit_block(byte *data, word blk, word blockcnt)
{
	string pkt, rpl;
	byte retries;
	byte cksum, i;
	
	for(retries=0;;) {
		/* Header */
		pkt = chr(XMODEM_SOH) + chr(blk & 0xFF) + chr(0xFF - (blk & 0xFF));
		cksum = 0;
		
		/* Body */
		for(i=0; i<XMODEM_PACKET_SIZE; ++i) {
			pkt += chr(*data);
			cksum += *data++;
		}
		
		/* Checksum */
		pkt += chr(cksum);

		DBG("Sending packet #" + str(blk+1) + " of " + str(blockcnt));
		DBG(hexdump((byte *)&pkt[0], 32 /*len(pkt)*/) + "...");
		
retransmit:			
		serial_send(sp, pkt); 
		
		/* Check timeout */
		do {
			rpl = serial_recv(sp, 1);
		} while(rpl == "");

		switch(rpl[0]) {
			case XMODEM_NACK:
				DBG("NACK");
				if(MAX_RETRIES == ++retries) {
					ERR("Max. transmission retries ("+str(retries)+") reached. Giving up");
					break;
				}
				DBG("Resending #" + str(blk+1));
				goto retransmit;
				
			case XMODEM_ACK:
				DBG("ACK");
				return true;
				
			default:
				DBG("Got unknown reply");
				DBG(hexdump((byte *)&rpl[0], len(rpl)));
				break;
		}
	} 
	
	return false;
}


bool
do_xmodem_upload(string fwfile)
{
	word blk, blockcnt;
	byte i;
	dword bc;
	firmware fw;
	byte *data;
	string pkt;
	word *temp;
	
	
	if(!load_firmware(fwfile, &fw))
		return false;
	
	data = (byte *)fw.data + 0x300 * sizeof(word);
	bc = fw.datalen * sizeof(word);
	temp = (word *)data;
	
	blockcnt = bc / XMODEM_PACKET_SIZE;
	if(bc % XMODEM_PACKET_SIZE != 0)
		++blockcnt;
 	/*
	 * The receiving side is sending NACK or 'C' to indicate that it ready to 
	 * begin data exchange. NACK means that receiver will use 1-byte CRC and
	 * 'C' indicates that CRC expected to be 16-bits.
	 * After that, we begin to send 132 or 133-byte packets, 
	 * which consists of SOH marker, packet number (and 0xFF-complement byte), 
	 * 128 bytes of data and 1 or 2 bytes of CRC	
	 */
	for(;;) {
		pkt = ser.getdata(255);
		if(pkt[0] == XMODEM_NACK || pkt[0] == 'C')
			break;
	}

	DBG("Got NACK from target");
	DBG("Transferring "+str(blockcnt)+" blocks");
	
	for(blk=0; blk<blockcnt; ++blk) {
		if(!transmit_block(data, blk, blockcnt))
			break;
		data += XMODEM_PACKET_SIZE;
	}
	
	DBG("EOT");
	serial_send(sp, chr(XMODEM_EOT));
	
	DBG("ETB");
	serial_send(sp, chr(XMODEM_ETB));

	return OK;
}
