#include "global.th"
#include "utils.th"
#include "hal.th"
#include "ssi.th"
#include "1wire.th"
#include "sensors_db.th"
#include "sensors_assoc.th"
#include "device_map.th"
#include "device_funcs.th"
#include "tgs.th"
#include "modbus.th"


// static :)
//
struct bus_scan {
	sensor *chain;
	unsigned short count;
	unsigned short ucount;
	ioport *port;
	byte addr[MAX_HW_ADDR_SIZE];
};


extern sensor *connected_sensors;


string
var_format(var& v)
{
	if(v.type == TYPE_FLOAT) { 
		return ftostr(v.f, FTOSTR_MODE_AUTO, 5);
	} else {
		return lstr(v.l); // + " (" +lhex(v.l)+")";
	}
} 


string 
address_format(iotype bus, void *addr)
{
	string<24> res;
	byte i, *ba;
	
	ba = (byte *)addr;
	switch(bus) {
		case IO_I2C:
			return tohex(ba[0]);
		
		case IO_OW:
			res = tohex(((ow_devid *)addr)->class) + ":";
			for(i=0; i<6; ++i)
				res += tohex(((ow_devid *)addr)->serial[5-i]);
			return res;
		
		case IO_RS485:
			return str(ba[0]); 

		case IO_GPIO4:
		case IO_DC:
			return "n/a";
	}
	
	return "?";
}


byte
dry_contacts_init()
{
	byte i, chnl, cc;
	word flags, mask;
	ioport *port;
	
	flags = val(stg_get("DCPE", 0)); // 16 bit flags 'dc port enable'
	for(cc=0, enum_init(); port = enum_type_next(IO_DC); ) {
		for(i=0; i<port->ci.count; ++i, ++cc) {
			chnl = port->ci.start + i;
			mask = 1 << chnl;
			if(0 != (flags & mask))
				if(NULL == sensor_assoc_add(IO_DC, chnl, 0, NULL))
					break;
		}
	}
	
	return cc; 
}


static void
probe_i2c_ports(bus_scan *bs) 
{
	string<127> is;
	int i, l;
	sensor *addr; 
	byte pn, cnt, s, e;
	
	s = bs->port->ci.start;
	e = s + bs->port->ci.count;
	cnt = 0;
	
	for(pn=s; pn<e; ++pn) {
		DBG("Probing I2C channel " + str(pn));
	
		is = i2c_port_scan(bs->port, (pn-s) % 2); // Max. of 2 I2C channels per tibbit
		
		l = len(is);
		for(i=0; i<l; ++i) {
			/* Try to find sensor with given ID on given I2C port
			 */
			bs->addr[0] = is[i];
			addr = sensor_assoc_find(IO_I2C, pn, bs->addr);
			if(NULL == addr) {
				// No such record in assoc db
				bs->ucount++;
			} else {
				addr->port = bs->port;
				addr->next = bs->chain;
				++cnt;
				bs->count++;
				bs->chain = addr; 
			}
		}
	}
}


static void
probe_1wire_port(bus_scan *bs)
{
	ow_devid owa;
	sensor *addr;
	byte pn, cnt, s, e;
	
	s = bs->port->ci.start;
	e = s + bs->port->ci.count;
	cnt = 0;
	
	for(pn=s; pn<e; ++pn) {
		DBG("Probing 1-Wire channel " + str(pn));
		ow_enum_start(bs->port, pn);
		while(ow_enum_next(bs->port, pn, &owa)) {
			if(ow_addr_valid(&owa)) { // additionaly you can check address validity agianst checksum
				_memcpy(&bs->addr, &owa, sizeof(owa));
				
				addr = sensor_assoc_find(IO_OW, pn, bs->addr);
				if(NULL == addr) {
					bs->ucount++;
				} else {
					addr->port = bs->port;
					addr->next = bs->chain;
					++cnt;
					bs->count++;
					bs->chain = addr;
				}
			}
		}
	}
}


static void
probe_adc_ports(bus_scan *bs)
{
	int n;
	sensor *addr;
	byte pn, cnt, s, e;
	
	s = bs->port->ci.start;
	e = s + bs->port->ci.count;
	cnt = 0;

	for(pn=s; pn<e; ++pn) {
		DBG("Probing ADC channel " + str(pn));
		n = sensor_assoc_findtype(0, IO_PIC_ADC, pn);
		if(n >= 0) {
			addr = sensor_assoc_get(n);
			
			addr->port = bs->port;
			addr->pin = pn % 3; // Each ADC tibbit have 3 channels
			addr->next = bs->chain;
			addr->ptype = SPT_WORD;
			
			bs->count++;
			bs->chain = addr;
		}
	}
}


static void
add_modbus_sensor(bus_scan *bs, byte saddr, byte drvid, sensor_param_type ptype)
{
	sensor *addr;
	
	bs->addr[0] = saddr;
	bs->addr[1] = 0;
	bs->addr[2] = 0;
	bs->addr[3] = 0;
	
	addr = sensor_assoc_add(ioport_type(bs->port), 0, drvid, bs->addr); 
	if(NULL != addr) {
		addr->port = bs->port;
		addr->next = bs->chain;
		addr->ptype = ptype;
		bs->count++;
		bs->chain = addr;
		serial_setup(addr->port);
	}
}


static byte
scan_modbus(ioport *p, byte *found)
{
	static byte addrs[5] = { 0x40, 0x41, 0x42, 0x43, 0x44 };
	byte i, cnt;
	string res;
		
	cnt = 0;
	for(i=0; i<5; ++i) {
		modbus_request(p, addrs[i], READ_INPUT_REGISTERS, 200, 1);
		
		while(!modbus_finished()) {
			if(modbus_timeout())
				break;
			doevents;
		}
		
		if(modbus_timeout())
			continue;
			
		if(modbus_finished()) {
			res = modbus_result();
			*found++ = addrs[i];
			++cnt;
		}
	}
	
	return cnt;
}


static void
probe_serial_port(bus_scan *bs)
{
	static byte hextypes[5] = { SPT_TEMPERATURE, SPT_TEMP_AND_HUMIDITY, SPT_LIGHT, SPT_SHOCK, SPT_FLOOD };
	byte i, cnt, found[5];
	byte id;
	serial_role role;
	
	/* Consoles and modems doesn't allow connection of any sensor
	 */
	role = serial_get_role(bs->port);
	if(SR_CONSOLE == role || SR_MODEM == role)
		return; 
	
	DBG("Probing " + ioport_typestring(bs->port) + " port ");
	
	cnt = scan_modbus(bs->port, found);
	for(i=0; i<cnt; ++i) {
		id = found[i] - 0x40;
		add_modbus_sensor(bs, found[i], 0xFF, hextypes[id]);
	}
}


static void
probe_dc_port(bus_scan *bs)
{
	int n;
	sensor *addr;
	byte s = bs->port->ci.start;
	byte e = s + bs->port->ci.count - 1;
	byte pn, i;
	
	DBG("Probing DC channels " + str(s) + " to " + str(e));

	for(i=0; i<bs->port->ci.count; ++i) {
		pn = i + s;
	
		n = sensor_assoc_findtype(0, IO_DC, pn);
		if(n >= 0) {
			addr = sensor_assoc_get(n);
			
			addr->port = bs->port;
			addr->pin = i; // Each DC tibbit have 3 optoisolated lines
			addr->next = bs->chain;
			addr->ptype = SPT_SWITCH;
			
			bs->count++;
			bs->chain = addr;
		}
	}
}


/*! \brief Initial port scan on device boot
 *
 * Scans all available buses and retrieves attached sensors IDs. Then perform look up
 * in sensor database and (if found) create sensor records for each found and recognized
 * sensor
 */
sensor *
probe_sensors(word *cnt, word *ucnt)
{
	word i, l;
	byte pn;
	bus_scan bs;
	
	bs.chain = NULL;
	bs.count = 0;
	bs.ucount = 0;

	enum_init();
	
	while(bs.port = enum_all_next()) {
		pn = 0;
		switch(ioport_type(bs.port)) {
			case IO_I2C:
				probe_i2c_ports(&bs); 
				break;
				
			case IO_OW:
				probe_1wire_port(&bs);
				break;
				
			case IO_PIC_ADC:
				probe_adc_ports(&bs);
				break;
				
			case IO_RS232:
			case IO_RS422:
			case IO_RS485:
				probe_serial_port(&bs);
				break;
				
			case IO_DC:
				probe_dc_port(&bs);
				break;
		}
	}

	*cnt = bs.count;
	*ucnt = bs.ucount;

	return bs.chain;
}
 

void
device_portscan(sensor *head)
{
	for(sensor_db_open(); head; head=head->next)
		sensor_read(head);
}


void
device_init_sensors(sensor *head)
{
	for(sensor_db_open(); head; head=head->next)
		sensor_init(head);
}


sensor *
sensor_by_index(word idx)
{
	sensor *s;
	
	for(s = connected_sensors; (NULL != s) && (idx != 0); --idx)
		s = s->next;
		
	return s;
}


sensor *
sensor_by_id(sensor_id sid)
{
	sensor *s;
	
	for(s=connected_sensors; NULL != s; s=s->next)
		if(sid == s->id)
			return s;
		
	return NULL;
}
