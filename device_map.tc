/* (c) 2016 Tibbo Technology, inc.
 *
 * Device Map
 * This file contains every bit of platform- and configuration dependent code
 */
#include "global.th"
#include "debug.th"
#include "hal.th"
#include "device_map.th"
#include "utils.th"
#include "1wire.th"


static ioport *_ioports[HAL_IOPORT_COUNT+1]; 
static ioport *_modem = NULL;
static byte _iop_count = 0;
static byte _enum_index = 0;
static byte _enum_serial_index = 0;


/* Channel counters for each kind of the bus
 */
static byte _ch_i2c = 0;
static byte _ch_serial = 0;
static byte _ch_ow = 0;
static byte _ch_adc = 0;
static byte _ch_dry = 0;
static byte _ch_relay = 0;


iotype
get_bus_type(byte n)
{
	return IO_NONE;
}


byte
get_total_port_count()
{
	return  _ch_i2c + 
			_ch_serial + 
			_ch_ow + 
			_ch_adc + 
			_ch_dry + 
			_ch_relay;
}


byte
get_port_count(iotype type)
{
	switch(type) {
		case IO_I2C:
		case IO_SPI:
			return _ch_i2c;
			
		case IO_OW:
		case IO_SW:
			return _ch_ow;
			
		case IO_DC:
			return _ch_dry;
			
		case IO_RS232:
		case IO_RS422:
		case IO_RS485:
			return _ch_serial;
			
		case IO_PIC_ADC:
			return _ch_adc;
			
		case IO_RELAY:
			return _ch_relay;
			
		default:
			break;
	}
	
	return 0;
}


void
check_pic_firmware(tbslot slot, string& idstr, string& fwname)
{
	/* To be implemented a bit later */
}


/* IMPORTANT NOTE: Keep this routine in sync with hw_config.html!
 */
tibbit
tibbit_number(string tb)
{
	/* GPIO lines, I2C */
	if(tb == "00-1")
		return TB_00_1;
	if(tb == "00-2")
		return TB_00_2;
	if(tb == "00-3")
		return TB_00_3;
		
	/* Serial ports */
	if(tb == "01")
		return TB_01;
	if(tb == "02")
		return TB_02;
	if(tb == "05")
		return TB_05;

	/* Relays */
	if(tb == "03-1")
		return TB_03_1;
	if(tb == "03-2")
		return TB_03_2;
	if(tb == "06")
		return TB_06;
	if(tb == "07")
		return TB_07;
	if(tb == "15")
		return TB_15;

	/* Optoisolated inputs */
	if(tb == "04-1")
		return TB_04_1;
	if(tb == "04-2")
		return TB_04_2;
	if(tb == "04-3")
		return TB_04_3;
	if(tb == "04-4")
		return TB_04_4;
		
	/* Misc */
	if(tb == "13")
		return TB_13;
	if(tb == "31")
		return TB_31;
	if(tb == "47")
		return TB_47;
	
	/* New tibbits */
#if 0		
	// CAN tibbit doesn't work on G1 and G2 boards
	if(tb == "51")
		return TB_51;
#endif

	return TB_NONE;
}


/* Parsing of string, which consists of two-digit-slot-number=four-digit-tibbit-number
 * i.e. 0=05-1{ rs232|rs422|rs485 console|tibbo|modbus|uart}
 * or   1=31 1-wire|adc
 */
static bool
parse_tibbit_record(string& trec)
{
	byte sp, slot;
	byte chnum, chcnt;
	iotype type;
	string<16> sopts, intf, role, tbnum;
	tibbit tid;
	ioport *port;
	
	port = NULL;
	chcnt = 1;
	chnum = 0;
	sopts = "";
	
	sp = instr(1, trec, " ", 1);
	if(0 == sp) {
		ERR("Malformed configuration string: \""+trec+"\"");
		return false;
	}
	
	tbnum = trim(mid(trec, sp+1, len(trec)-sp));
	slot = val(mid(trec, 2, sp-2));
	
	sp = instr(1, tbnum, " ", 1);
	if(sp > 0) {
		sopts = trim(mid(tbnum, sp+1, len(trec)-sp));
		tbnum = left(tbnum, sp-1);
	}
	
	/* Perform data sanity checks: slot number must be odd, lesser than maximum
	 * number of slots present on current type of PCB and tibbit ID must be
	 * one of supported types.
	 */
	if(slot >= HAL_SLOT_COUNT) {
		ERR("Wrong slot number: " + str(slot));
		return false;
	}
	
	tid = tibbit_number(tbnum);
	if(TB_NONE == tid) {
		ERR("Unknown tibbit type \""+tbnum+"\" for slot "+str(slot));
		return false;
	}

	tibbit_install(slot, tid);
	
	switch(tid) {
		/* PIC tibbit needs info about what kind of firmware must be uploaded into it.
		 */
		case TB_31:
			if(sopts == "1-wire") {
				type = IO_OW;
				onewire_enabled = true;
				chcnt = 3;
				chnum = _ch_ow;
				_ch_ow += chcnt;
			} else if(sopts == "adc") {
				type = IO_PIC_ADC;
				chcnt = 3;
				chnum = _ch_adc;
				_ch_adc += chcnt;
			} else {
				ERR("Unsupported PIC firmware type \""+sopts+"\"");
				return false;
			}
			
			port = ioport_alloc(slot, type, -1);
			if(NULL != port) {
				check_pic_firmware(slot, "", "pic_"+sopts+".bin");
				if(IO_OW == type) {
					ioport_setopt(port, IO_SSI_HW_ACCEL, 1);
					port->d.ssi.devid = 0x06; // TODO Predefined
				}
			}
			break;

		/* Universal serial port can be configured to function as one of three physical
		 * interfaces RS-232, RS-422, RS-485 and can be switched to one of four logical
		 * protocols: console, modbus, tibbo, uart
		 */
		case TB_02:
			sp = instr(1, sopts, " ", 1);
			if(0 == sp) {
				ERR("Tibbit #02 options must have 2 fields: type and role. Found: \""+sopts+"\"");
				return false;
			} else {
				port = ioport_alloc(slot, IO_RS232, 0);
				if(NULL != port) {
					serial_remember_port(port);
					
					chnum = _ch_serial++;
					chcnt = 1;
					
					role = mid(sopts, sp+1, len(sopts)-sp);
					intf = left(sopts, sp-1);
					
					if(intf == "rs232") {
						type = IO_RS232;
						//serial_set_type(port, IO_RS232);
					} else if(intf == "rs422") {
						type = IO_RS422;
						serial_set_type(port, IO_RS422);
					} else if(intf == "rs485") {
						type = IO_RS485;
						serial_set_type(port, IO_RS485);
					} else {
						ERR("Bad interface type specified: \""+intf+"\". Defaulting to RS-232");
					}
					
					if(role == "uart") {
						serial_set_role(port, SR_UART);
					} else if(role == "modbus") {
						serial_set_role(port, SR_MODBUS);
					} else if(role == "tibbo") {
						serial_set_role(port, SR_TIBBO);
					} else if(role == "console") {
						serial_set_role(port, SR_CONSOLE);
					} else {
						ERR("Bad interface role specified: \""+role+"\". Defaulting to UART");
					}
				}
			}
			break;
			
		case TB_01:
		case TB_05:
			port = ioport_alloc(slot, (tid == TB_01)? IO_RS232: IO_RS485, -1);
			if(NULL != port) {
				serial_remember_port(port);
				
				chnum = _ch_serial++;
				chcnt = 1;
				
				if(sopts == "uart") {
					serial_set_role(port, SR_UART);
				} else if(sopts == "modbus") {
					serial_set_role(port, SR_MODBUS);
				} else if(sopts == "tibbo") {
					serial_set_role(port, SR_TIBBO);
				} else if(sopts == "console") {
					serial_set_role(port, SR_CONSOLE);
				} else {
					ERR("Bad interface role specified: \""+role+"\". Defaulting to UART");
				}
			}
			break;
			
		/* GPIO lines
		 */
		case TB_00_1:
		case TB_00_2:
		case TB_00_3:
			chnum = _ch_i2c;
			chcnt = (tid == TB_00_1)? 2: 1;
			_ch_i2c += chcnt;
			type = IO_I2C;
			port = ioport_alloc(slot, IO_I2C, 0);
			break;
			
		/* Relays
		 */
		case TB_03_1:
		case TB_03_2:
		case TB_06:
		case TB_07:
		case TB_15:
			chnum = _ch_relay;
			chcnt = (tid == TB_15)? 1: 2;
			_ch_relay += chcnt;
			type = IO_RELAY;
			port = ioport_alloc(slot, IO_RELAY, -1);
			break;
		
		/* Dry contacts
		 */
		case TB_04_1:
			chcnt = 2;
			goto dcalloc;
			
		case TB_04_2:
		case TB_04_3:
			chcnt = 3;
			goto dcalloc;
			
		case TB_04_4:
			chcnt = 4;
dcalloc:			
			chnum = _ch_dry;
			_ch_dry += chcnt;
			type = IO_DC;
			port = ioport_alloc(slot, IO_DC, 0);
			break;
		
		/* Modem
		 */
		case TB_47:
			chcnt = 1;
			chnum = _ch_serial++;
			type = IO_MODEM;
			port = ioport_alloc(slot, IO_RS232, -1);
			if(NULL != port) {
				serial_remember_port(port);
				serial_set_role(port, SR_MODEM);
				_modem = port;
			}
			break;
			
		default:
			// Will never happen
			break;
	}

	if((NULL != port) && (_iop_count < HAL_IOPORT_COUNT)) {
		DBG("Allocated " + ioport_typestring(port) + " channel " + str(chnum) + "..." + str(chnum + chcnt-1));
		ioport_set_channels(port, chnum, chcnt);
		_ioports[_iop_count++] = port;
	}
	
	return true;
}


static void
write_default_config(string& name)
{
	string config =
		"S00 02 rs232 console\r\n"
		"S02 05 tibbo\r\n"
		"S03 00-3\r\n"
		"S04 31 1-wire\r\n"
		"S05 03-1\r\n"
		"S06 47\r\n"
		"S08 04-2\r\n"
		"S09 04-2\r\n"
		"S10 00-1\r\n"
		"S11 00-3\r\n";
		
	fd.filenum = FILENO_TEMP;
	
	if(open_always(FILENO_TEMP, name)) {
		fd.setdata(config);
		fd.close();
	}
}


static void
device_map_load_config(string& fname)
{
	dword dwp;
	string s;
	byte tries;
	pl_fd_status_codes res;
	
#if 0
	fd.delete(fname);
#endif

	for(tries=0; tries<2; ++tries) {
		fd.filenum = FILENO_TEMP;
		res = fd.open(fname);
		if(PL_FD_STATUS_OK == res)
			break;
		
		if(0 == tries) {
			DBG("Hardware configuration file \""+fname+"\" is not found. Using default configuration.");
			write_default_config(fname);
		}
	}
	
	if(tries == 2) {
		ERR("Failed to create hardware configuration file. Stop.");
		sys.halt();
	}
	
	while(fd.pointer < fd.filesize) {
		dwp = fd.find(fd.pointer, "\r\n", 1, FORWARD, 1, PL_FD_FIND_EQUAL);
		if(0 == dwp)
			break; // not found
			
		s = fd.getdata(dwp - fd.pointer);
		fd.setpointer(dwp + 2);
		
		parse_tibbit_record(s);
	}
}


bool
device_map_init()
{
	device_map_load_config("hwconfig");
	return true; 
}


ioport *
map_device(iotype bus, byte channel)
{
	ioport *p;
	iotype bt;
	byte i;
	
	if(bus == IO_MODEM)
		return _modem;
		
	for(i=0; i<_iop_count; ++i) {
		p = _ioports[i];
		
		bt = ioport_type(p);
		if(bus != bt)
			continue;
			
		if((channel >= p->ci.start) && channel < (p->ci.start + p->ci.count))
			return p;
	}

	ERR("Failed to map device " + iotype_string(bus) + ", channel " + str(channel));
	return NULL;
}


void
enum_init()
{
	_enum_index = 0;
	_enum_serial_index = 0;
}


ioport *
enum_serial_next(serial_role role)
{
	ioport *p;
	
	for(p=NULL; _enum_serial_index < _iop_count; ) {
		p = _ioports[_enum_serial_index++];
		if(is_serial_port(p) && (serial_get_role(p) == role))
			break;
	}
	
	return p;
}

ioport *
enum_type_next(iotype type)
{
	ioport *p;
	
	while(_enum_index < _iop_count) {
		p = _ioports[_enum_index++];
		if(ioport_type(p) == type)
			return p;
	}
	
	return NULL;
}


ioport *
enum_all_next()
{
	if(_enum_index >= _iop_count)
		return NULL;
		
	return _ioports[_enum_index++];
}
